@model Models.ReponseModel.PostFull
@using Models.ViewModel.Home

<main id="site__main" class="2xl:ml-[--w-side] xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">
    <div style="width:700px" id="js-oversized">
        <div class="w-full h-full">
            <partial name="_Post" model="Model" view-data='new ViewDataDictionary(ViewData) { ["ShowAllComment"] = true, ["LoggedInUserId"] = ViewBag.LoggedInUserId }' />
            <partial name="_PostDeleteConfirmation" />
        </div>
    </div>
</main>
<partial name="_EditStatus" model="new PostEditVM()" />

<script>
    let loggedInUserId = @(ViewBag.LoggedInUserId != null ? ViewBag.LoggedInUserId.ToString() : "null");
        document.querySelectorAll('.add-comment-form').forEach(form => {
            form.addEventListener('submit', async function (event) {
                event.preventDefault();

                const formData = new FormData(this);
                const postId = formData.get('postId');
                const content = formData.get('content');
                const textarea = this.querySelector('textarea[name="content"]');

                if (!content || content.trim() === '') {
                    Toastify({
                        text: "Bình luận không được để trống!",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#ff4d4f",
                    }).showToast();
                    return;
                }

                try {
                    await connection.invoke("AddComment", parseInt(postId), content);
                    console.log("Comment added successfully.");
                    textarea.value = '';
                } catch (err) {
                    console.error("Failed to add comment:", err);
                    Toastify({
                        text: "Có lỗi xảy ra khi thêm bình luận.",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#ff4d4f",
                    }).showToast();
                }
            });
        });

        const handleRemoveComment = async function (event) {
            event.preventDefault();
            const commentId = this.getAttribute('data-comment-id');
            const postId = this.closest('.post-item').id.replace('post-', '');

            try {
                await connection.invoke("RemoveComment", parseInt(postId), parseInt(commentId));
                console.log("Comment removed successfully.");
            } catch (err) {
                console.error("Failed to remove comment:", err);
                Toastify({
                    text: "Có lỗi xảy ra khi xóa bình luận.",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "#ff4d4f",
                }).showToast();
            }
        };

        document.querySelectorAll('.remove-comment-form').forEach(form => {
            form.addEventListener('submit', handleRemoveComment);
        });

        document.querySelectorAll('.like-button').forEach(button => {
            button.addEventListener('click', async function (event) {
                event.preventDefault();
                const postId = this.getAttribute('data-post-id');
                const isLiked = this.classList.contains('text-red-500');
                const likeCountElement = this.closest('.flex.items-center.gap-4').querySelector('a:last-child');
                let currentLikes = parseInt(likeCountElement.textContent) || 0;

                // Cập nhật giao diện ngay lập tức
                const icon = this.querySelector('ion-icon');
                if (isLiked) {
                    this.classList.remove('text-red-500');
                    icon.name = 'heart-outline';
                    likeCountElement.textContent = currentLikes > 0 ? currentLikes - 1 : 0;
                } else {
                    this.classList.add('text-red-500');
                    icon.name = 'heart';
                    likeCountElement.textContent = currentLikes + 1;
                }

                try {
                    const formdata = new FormData();
                    formdata.append("postId", postId);
                    const response = await fetch(`/Home/${isLiked ? 'Unlike' : 'LikePost'}`, {
                        method: 'POST',
                        body: formdata
                    });
                    const result = await response.json();
                    if (result.status !== 1) {
                        // Hoàn tác giao diện nếu có lỗi từ server
                        if (isLiked) {
                            this.classList.add('text-red-500');
                            icon.name = 'heart';
                            likeCountElement.textContent = currentLikes;
                        } else {
                            this.classList.remove('text-red-500');
                            icon.name = 'heart-outline';
                            likeCountElement.textContent = currentLikes;
                        }
                        Toastify({
                            text: result.message,
                            duration: 3000,
                            gravity: "top",
                            position: "right",
                            backgroundColor: "#ff4d4f",
                        }).showToast();
                    }
                } catch (error) {
                    console.error("Lỗi khi gửi yêu cầu:", error);
                    // Hoàn tác giao diện nếu có lỗi
                    if (isLiked) {
                        this.classList.add('text-red-500');
                        icon.name = 'heart';
                        likeCountElement.textContent = currentLikes;
                    } else {
                        this.classList.remove('text-red-500');
                        icon.name = 'heart-outline';
                        likeCountElement.textContent = currentLikes;
                    }
                    Toastify({
                        text: "Lỗi kết nối. Vui lòng thử lại.",
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#ff4d4f",
                    }).showToast();
                }
            });
        });

        // --- Thêm: Chức năng xử lý xóa bài viết ---
        window.openPostDeleteConfirmation = function (postId) {
            document.getElementById('deleteConfirmationPostId').value = postId;
            UIkit.modal(document.getElementById('postDeleteDialog')).show();
        };

        document.getElementById('confirmDeleteBtn').addEventListener('click', async function () {
            const postId = document.getElementById('deleteConfirmationPostId').value;
            try {
                const response = await fetch(`/Home/DeletePost?PostId=${postId}`, {
                    method: 'DELETE',
                });
                const result = await response.json();
                if (result.status === 1) {
                    document.getElementById(`post-${postId}`).remove();
                    UIkit.modal(document.getElementById('postDeleteDialog')).hide();
                    Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#5cb85c",
                    }).showToast();
                } else {
                    Toastify({
                        text: result.message,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#ff4d4f",
                    }).showToast();
                }
            } catch (error) {
                console.error("Lỗi khi xóa bài viết:", error);
                Toastify({
                    text: "Đã xảy ra lỗi khi xóa bài viết.",
                    duration: 3000,
                    gravity: "top",
                    position: "right",
                    backgroundColor: "#ff4d4f",
                }).showToast();
            }
        });

        // --- Lắng nghe sự kiện từ SignalR ---
        connection.on("ReceiveComment", function (postId, comment) {
            const postElement = document.getElementById(`post-${postId}`);
            if (postElement) {
                const commentsList = postElement.querySelector('.comments-list');
                const newCommentHtml = `
                    <div class="flex items-start gap-3 relative new-comment" id="comment-${comment.id}">
                        <img src="${comment.userProfilePictureUrl || '/images/avatar/user.png'}" class="w-6 h-6 mt-1 rounded-full" />
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <span class="text-black font-medium inline-block flex-grow">${comment.userFullName}</span>
                                <small>Just now</small>
                            </div>
                            <p class="mt-0.5">${comment.content}</p>
                            <form class="remove-comment-form" data-comment-id="${comment.id}">
                                <button type="submit" class="text-red-500 text-xs ml-2" title="Remove post comment">
                                    <ion-icon name="trash-outline"></ion-icon>
                                </button>
                            </form>
                        </div>
                    </div>
                `;
                commentsList.insertAdjacentHTML('afterbegin', newCommentHtml);
                const newCommentForm = document.querySelector(`#comment-${comment.id} .remove-comment-form`);
                if (newCommentForm) {
                    newCommentForm.addEventListener('submit', handleRemoveComment);
                }
            }
        });

        connection.on("RemoveCommentResponse", function (postId, commentId) {
            const commentElement = document.getElementById(`comment-${commentId}`);
            if (commentElement) {
                commentElement.remove();
            }
        });
    });
</script>