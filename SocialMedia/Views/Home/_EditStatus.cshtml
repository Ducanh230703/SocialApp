<div id="editPostModal" uk-modal>
    <div class="uk-modal-dialog uk-modal-body bg-white rounded-lg shadow-lg w-full max-w-xl p-4 relative">
        <button class="uk-modal-close-outside" type="button" uk-close></button>

        <h2 class="text-lg font-semibold text-center mb-4">Chỉnh sửa bài viết</h2>
        <button class="absolute top-2 right-2 text-gray-500" onclick="closeEditModal()">×</button>
        <form id="editPostForm" asp-action="EditPost" asp-controller="Home" method="post" enctype="multipart/form-data">
            <input type="hidden" name="PostId" id="postIdInput" value="@Model.PostId" />
            <textarea name="Content" id="editContent" class="w-full border rounded p-2 mb-2">@Model.Content</textarea>

            <label>Ảnh mới:</label>
            <input type="file" name="Image" id="editImageInput" multiple accept="image/*" class="mb-2" />

            <div id="existingImagesContainer" class="flex flex-wrap gap-2 mb-2">
                @if (Model.ImageUrls != null)
                {
                    foreach (var url in Model.ImageUrls.Split(','))
                    {
                        <div class="existing-image relative" data-url="@url">
                            <img src="@url" class="w-20 h-20 object-cover rounded border" />
                            <button type="button" class="remove-old-image absolute top-0 right-0 bg-red-600 text-white rounded-full w-5 h-5 text-xs">×</button>
                        </div>
                    }
                }
            </div>

            <div id="editImagePreviewContainer" class="flex flex-wrap gap-2 mb-2"></div>
            <div id="removedImageContainer"></div>

            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded">Lưu thay đổi</button>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const editImageInput = document.getElementById("editImageInput");
        const imagePreviewContainer = document.getElementById("editImagePreviewContainer");
        const removedImageContainer = document.getElementById("removedImageContainer");
        const existingImagesContainer = document.getElementById("existingImagesContainer");
        const editPostForm = document.getElementById("editPostForm");
        const editContent = document.getElementById("editContent");
        const postIdInput = document.querySelector("#editPostForm input[name='PostId']");

        let selectedNewImages = [];

        // Thêm các sự kiện kéo thả vào form
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            editPostForm.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        editPostForm.addEventListener('dragenter', () => {
            editPostForm.classList.add('border-blue-500');
            editPostForm.classList.remove('border-gray-300');
        }, false);

        editPostForm.addEventListener('dragleave', () => {
            editPostForm.classList.remove('border-blue-500');
            editPostForm.classList.add('border-gray-300');
        }, false);

        editPostForm.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            editPostForm.classList.remove('border-blue-500');
            editPostForm.classList.add('border-gray-300');
            const dt = e.dataTransfer;
            const files = dt.files;

            // Tự động kích hoạt sự kiện "change" trên input file để xử lý
            editImageInput.files = files;
            const changeEvent = new Event('change');
            editImageInput.dispatchEvent(changeEvent);
        }

        window.closeEditModal = function () {
            UIkit.modal('#editPostModal').hide();
            resetEditForm();
        };

        function resetEditForm() {
            editPostForm.reset();
            editContent.value = "";
            imagePreviewContainer.innerHTML = "";
            imagePreviewContainer.classList.add("hidden");
            selectedNewImages = [];
            removedImageContainer.innerHTML = "";
            existingImagesContainer.innerHTML = "";
        }

            function renderExistingImagesFromApi(imageUrlsString) {
        existingImagesContainer.innerHTML = '';

        if (imageUrlsString && typeof imageUrlsString === 'string') {
            // Tách chuỗi URL (ngăn cách bởi dấu phẩy) thành mảng các URL riêng lẻ
            const filenames = imageUrlsString.split(',');

            filenames.forEach(filename => {
                const trimmedFilename = filename.trim();
                if (trimmedFilename === '') return;

                // ✨ LOGIC TRÍCH XUẤT TÊN FILE (chuỗi sau fileName=) ✨
                let fileNameOnly = trimmedFilename;
                const parts = trimmedFilename.split('fileName='); // Cắt chuỗi tại 'fileName='

                if (parts.length > 1) {
                    // Lấy phần thứ hai của mảng (phần sau 'fileName=')
                    fileNameOnly = parts[1];

                    // Nếu có các tham số khác theo sau (ví dụ: &amp;width=...), cắt chúng đi
                    const otherParamsIndex = fileNameOnly.indexOf('&');
                    if (otherParamsIndex !== -1) {
                        fileNameOnly = fileNameOnly.substring(0, otherParamsIndex);
                    }
                }
                // **********************************

                // 1. Dùng URL đầy đủ để hiển thị ảnh
                const imageUrlFull = trimmedFilename;

                const imageDiv = document.createElement("div");
                imageDiv.className = "existing-image relative";
                // 2. LƯU CHUỖI ĐÃ CẮT (tên file) vào data-url để gửi lên API
                imageDiv.dataset.url = fileNameOnly; // <-- ĐÂY LÀ PHẦN BẠN CẦN

                const img = document.createElement("img");
                img.src = imageUrlFull;
                img.className = "w-20 h-20 object-cover rounded border";

                const removeBtn = document.createElement("button");
                removeBtn.type = "button";
                removeBtn.innerText = "×";
                removeBtn.className = "remove-old-image absolute top-0 right-0 bg-red-600 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs";

                imageDiv.appendChild(img);
                imageDiv.appendChild(removeBtn);
                existingImagesContainer.appendChild(imageDiv);
            });
        }
    }

        window.openEditModal = function (postId) {
            resetEditForm();
            fetch(`/Home/GetPostById?postId=${postId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data) {
                        throw new Error('Empty or invalid data received from API');
                    }
                    console.log("Data fetched for post:", data);
                    editContent.value = data.content || '';
                    postIdInput.value = data.postId || '';
                    renderExistingImagesFromApi(data.imageUrls);
                    UIkit.modal('#editPostModal').show();
                })
                .catch(err => {
                    console.error('Lỗi khi lấy dữ liệu bài viết:', err);
                    alert('Không thể tải dữ liệu bài viết. Vui lòng thử lại.');
                });
        };

        UIkit.util.on('#editPostModal', 'hidden', function () {
            resetEditForm();
        });

        existingImagesContainer.addEventListener("click", function (event) {
            if (event.target && event.target.matches(".remove-old-image")) {
                const imageDiv = event.target.closest(".existing-image");
                const imageUrl = imageDiv.getAttribute("data-url");
                const hiddenInput = document.createElement("input");
                hiddenInput.type = "hidden";
                hiddenInput.name = "RemovedImageUrls";
                hiddenInput.value = imageUrl;
                removedImageContainer.appendChild(hiddenInput);
                imageDiv.remove();
            }
        });

        editImageInput.addEventListener("change", function (event) {
            const newFiles = Array.from(event.target.files);

            newFiles.forEach(file => {
                const exists = selectedNewImages.some(f => f.name === file.name && f.size === file.size);
                if (!exists) {
                    selectedNewImages.push(file);
                }
            });

            // Tạo lại FileList cho input để form có thể gửi đi
            const dt = new DataTransfer();
            selectedNewImages.forEach(f => dt.items.add(f));
            editImageInput.files = dt.files;

            imagePreviewContainer.classList.toggle('hidden', selectedNewImages.length === 0);
            imagePreviewContainer.innerHTML = '';

            selectedNewImages.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const wrapper = document.createElement("div");
                    wrapper.className = "relative";
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "w-24 h-24 object-cover rounded";
                    const removeBtn = document.createElement("button");
                    removeBtn.type = "button";
                    removeBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>`;
                    removeBtn.className = "absolute top-0 right-0 -mt-1 -mr-1 bg-white rounded-full w-6 h-6 flex items-center justify-center shadow remove-new-image";
                    removeBtn.dataset.index = index;
                    wrapper.appendChild(img);
                    wrapper.appendChild(removeBtn);
                    imagePreviewContainer.appendChild(wrapper);
                };
                reader.readAsDataURL(file);
            });
        });

        imagePreviewContainer.addEventListener("click", function (e) {
            if (e.target.closest(".remove-new-image")) {
                const removeBtn = e.target.closest(".remove-new-image");
                const indexToRemove = parseInt(removeBtn.dataset.index);
                selectedNewImages = selectedNewImages.filter((_, idx) => idx !== indexToRemove);

                const dt = new DataTransfer();
                selectedNewImages.forEach(f => dt.items.add(f));
                editImageInput.files = dt.files;

                removeBtn.parentElement.remove();

                imagePreviewContainer.querySelectorAll(".remove-new-image").forEach((btn, newIndex) => {
                    btn.dataset.index = newIndex;
                });

                if (selectedNewImages.length === 0) {
                    imagePreviewContainer.classList.add("hidden");
                }
            }
        });

        editPostForm.addEventListener("submit", function (e) {
            e.preventDefault();
            const content = editContent.value.trim();
            const existingImagesCount = existingImagesContainer.querySelectorAll(".existing-image").length;
            const newImagesCount = selectedNewImages.length;

            if (content === "" && existingImagesCount === 0 && newImagesCount === 0) {
                alert("Bài viết phải có nội dung hoặc ít nhất một ảnh.");
                return; 
            }
            const formData = new FormData();

            formData.append("PostId", postIdInput.value);
            formData.append("Content", editContent.value);

            selectedNewImages.forEach(file => {
                formData.append("Image", file);
            });

            const remainingImageUrls = [];
            existingImagesContainer.querySelectorAll(".existing-image").forEach(div => {
                const url = div.getAttribute("data-url");
                if (url) {
                    remainingImageUrls.push(url);
                }
            });
            formData.append("ImageUrls", remainingImageUrls.join(","));

            const removedInputs = removedImageContainer.querySelectorAll("input[name='RemovedImageUrls']");
            removedInputs.forEach(input => {
                formData.append("RemovedImageUrls", input.value);
            });

            fetch("/Home/EditPost", {
                method: "POST",
                body: formData
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errorData => {
                            throw new Error(errorData.message || 'Server responded with an error.');
                        }).catch(() => {
                            throw new Error('Network response was not ok, and could not parse error message.');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.status === 1) {
                        alert("Cập nhật thành công!");
                        UIkit.modal('#editPostModal').hide();
                        location.reload();
                    } else {
                        alert("Có lỗi xảy ra khi cập nhật: " + (data.message || "Không rõ lỗi."));
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi gửi yêu cầu:", error);
                    alert("Đã xảy ra lỗi: " + error.message);
                });
        });

        if (editImageInput.files.length === 0) {
            imagePreviewContainer.classList.add("hidden");
        }
    });
</script>