@using Models.ReponseModel
@using Models.ViewModel.Home
@using Models.ViewModel.Story
@model PaginatedResponse<PostFull>

@{
    ViewData["Title"] = "Trang chủ";
    var currentPage = (int)ViewBag.CurrentPage;
    var pageSize = (int)ViewBag.PageSize;
    var loggedInUserId = (int?)ViewBag.LoggedInUserId;
}

<main id="site__main" class="2xl:ml-[--w-side] xl:ml-[--w-side-sm] p-2.5 h-[calc(100vh-var(--m-top))] mt-[--m-top]">
    <div class="lg:flex 2xl:gap-16 gap-12 max-w-[1065px] mx-auto" id="js-oversized">
        <div class="max-w-[680px] mx-auto">
            @* Stories Component *@
            @await Component.InvokeAsync("Stories")

            <div class="md:max-w-[580px] mx-auto flex-1 xl:space-y-6 space-y-3">
                @* Create Status Section *@
                <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1">
                    <div class="flex items-center md:gap-3 gap-1">
                        <div class="flex-1 bg-slate-100 hover:bg-opacity-80 transition-all rounded-lg cursor-pointer" uk-toggle="target: #create-status">
                            <div class="py-2.5 text-center">What do you have in mind?</div>
                        </div>
                        <div class="cursor-pointer hover:bg-opacity-80 p-1 px-1.5 rounded-xl transition-all bg-pink-100/60 hover:bg-pink-100" uk-toggle="target: #create-status">
                            <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 stroke-pink-600 fill-pink-200/70" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M15 8h.01" />
                                <path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" />
                                <path d="M3.5 15.5l4.5 -4.5c.928 -.893 2.072 -.893 3 0l5 5" />
                                <path d="M14 14l1 -1c.928 -.893 2.072 -.893 3 0l2.5 2.5" />
                            </svg>
                        </div>
                    </div>
                </div>

                <div id="posts-container" class="space-y-4">
                    @if (Model != null && Model.Data != null && Model.Data.Any())
                    {
                        @foreach (var post in Model.Data)
                        {
                            @await Html.PartialAsync("_Post", post, new ViewDataDictionary(ViewData) { { "ShowAllComment", true } })
                        }
                    }
                    else
                    {
                        <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1" style="width: 580px;">
                            Hiện tại không có bài viết nào. Bạn có muốn tạo bài viết đầu tiên không?
                        </div>
                    }
                </div>
                <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1 text-center">
                    <h3 class="text-lg font-semibold mb-2">Bấm để gửi click</h3>

                    <button id="sendClickBtn" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg">
                        Gửi Click
                    </button>

                    <p class="mt-4 text-gray-700">
                        Tổng số click đã nhận: <span id="totalClicks">0</span>
                    </p>
                </div>


                <div class="uk-flex uk-flex-center mt-6">
                    <button id="loadMorePostsBtn"
                            class="button lg:text-lg lg:py-4 flex items-center justify-center gap-2"
                            data-next-page="@(currentPage + 1)"
                            data-page-size="@pageSize">
                        <ion-icon name="sync-outline" class="text-xl"></ion-icon>
                        <span>Tải thêm</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

</main>

@* Modals *@
<partial name="_CreateStatus" model="new PostVM()" />
<partial name="_PostDeleteConfirmation" />
<partial name="_Createstory" model="new StoryVM()" />
<partial name="_EditStatus" model="new PostEditVM()" />


    <script>
        // let connection;
        // let totalClicks = 0;
        let loggedInUserId = @(loggedInUserId.HasValue ? loggedInUserId.Value.ToString() : "null");

        // document.addEventListener("DOMContentLoaded", async () => {
        //     Khởi tạo kết nối
        //     connection = new signalR.HubConnectionBuilder()
        //         .withUrl(`https:localhost:7024/chathub`)
        //         .configureLogging(signalR.LogLevel.Information)
        //         .build();

        //     connection.on("ReceiveClickCount", (amountOfClicksReceived) => {
        //     totalClicks += amountOfClicksReceived;
        //     document.getElementById("totalClicks").innerText = totalClicks;
        //     console.log(`Nhận thêm ${amountOfClicksReceived} click. Tổng cộng: ${totalClicks}`);

        //     Toastify({
        //         text: `Bạn vừa nhận thêm ${amountOfClicksReceived} click!`,
        //         duration: 2000,
        //         backgroundColor: "#28a745",
        //         gravity: "top",
        //         position: "right", 
        //     }).showToast();
        // });

        //     try {
        //         await connection.start();
        //         console.log("SignalR connected:", connection.connectionId);
        //     } catch (err) {
        //         console.error("SignalR connection error:", err);
        //     }
        //     document.getElementById("sendClickBtn").addEventListener("click", async () => {
        //         try {
        //             await .invoke("SendClickCount", 4, 1);
        //             console.log("Click sent!");
        //         } catch (err) {
        //             console.error("Error sending click:", err);
        //         }
        //     });
        // });

   
        function openPostDeleteConfirmation(postId) {
            UIkit.dropdown('.post-options-dropdown')?.hide?.();
            document.getElementById('deleteConfirmationPostId').value = postId;
            UIkit.modal('#postDeleteDialog').show();
        }

        document.addEventListener('DOMContentLoaded', function () {
            const postsContainer = document.getElementById('posts-container');
            const loadMoreBtn = document.getElementById('loadMorePostsBtn');

            if (postsContainer) {
                postsContainer.addEventListener('click', function (event) {
                    const editButton = event.target.closest('a[data-edit-post-id]');
                    if (editButton) {
                        event.preventDefault();
                        const postId = editButton.getAttribute('data-edit-post-id');
                        window.location.href = `/Home/Index?editId=${postId}`;
                    }
                });

                postsContainer.addEventListener('submit', function (e) {
                    if (e.target.classList.contains('add-comment-form')) {
                        e.preventDefault();

                        const form = e.target;
                        const postId = form.getAttribute('data-post-id');
                        const textarea = form.querySelector('textarea[name="content"]');
                        const content = textarea.value.trim();

                        if (!content) {
                            Toastify({
                                text: "Nội dung bình luận không được để trống.",
                                duration: 3000,
                                backgroundColor: "#f44336",
                                gravity: "top",
                                position: "center",
                            }).showToast();
                            return;
                        }

                        const formData = new FormData();
                        formData.append("PostId", postId);
                        formData.append("Content", content);

                        fetch('/Home/AddPostComment', {
                            method: 'POST',
                            body: formData,
                        })
                        .then(res => res.json())
                        .then(data => {
                            if (data.status === 1) {
                                Toastify({
                                    text: data.message || "Bình luận thành công!",
                                    duration: 3000,
                                    backgroundColor: "#4CAF50",
                                    gravity: "top",
                                    position: "center",
                                }).showToast();
                                textarea.value = "";
                                if (data.data) {
                                const postElement = document.querySelector(`.post-item[data-post-id="${postId}"]`);
                                if (postElement) {
                                    const commentsList = postElement.querySelector('.comments-list'); 
                                    if (commentsList) {
                                        const newCommentHtml = createCommentHtml(data.data);

                                        commentsList.insertAdjacentHTML('afterbegin', newCommentHtml);
                                    }
                                }
                            }
                            } else {
                                Toastify({
                                    text: data.message || "Không thể thêm bình luận.",
                                    duration: 3000,
                                    backgroundColor: "#f44336",
                                    gravity: "top",
                                    position: "center",
                                }).showToast();
                            }
                        })
                        .catch(err => {
                            console.error(err);
                            Toastify({
                                text: "Đã xảy ra lỗi khi thêm bình luận.",
                                duration: 3000,
                                backgroundColor: "#f44336",
                                gravity: "top",
                                position: "center",
                            }).showToast();
                        });
                    }

                    // Xóa bình luận
                    if (e.target.classList.contains('remove-comment-form')) {
                        e.preventDefault();

                        const form = e.target;
                        const commentId = form.getAttribute('data-comment-id');
                        const actionUrl = form.getAttribute('action') + '?commentId=' + commentId;

                        fetch(actionUrl, {
                            method: 'DELETE',
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === 1) {
                                Toastify({
                                    text: data.message || "Xóa bình luận thành công.",
                                    duration: 3000,
                                    backgroundColor: "#4CAF50",
                                    gravity: "top",
                                    position: "center"
                                }).showToast();

                                form.closest('.flex.items-start.gap-3.relative')?.remove();
                            } else {
                                Toastify({
                                    text: data.message || "Không thể xóa bình luận.",
                                    duration: 3000,
                                    backgroundColor: "#f44336",
                                    gravity: "top",
                                    position: "center"
                                }).showToast();
                            }
                        })
                        .catch(error => {
                            console.error("Lỗi:", error);
                            Toastify({
                                text: "Đã xảy ra lỗi khi gửi yêu cầu xóa bình luận.",
                                duration: 3000,
                                backgroundColor: "#f44336",
                                gravity: "top",
                                position: "center"
                            }).showToast();
                        });
                    }
                });



                // Thích/Bỏ thích bài viết
                postsContainer.addEventListener('click', function (e) {
                    const likeButton = e.target.closest('.like-button');
                    if (!likeButton) return;

                    const postId = likeButton.getAttribute('data-post-id');

                    if (loggedInUserId === null || isNaN(parseInt(loggedInUserId))) {
                        Toastify({
                            text: "Bạn cần đăng nhập để thực hiện hành động này.",
                            duration: 3000,
                            backgroundColor: "#f44336",
                            gravity: "top",
                            position: "center",
                        }).showToast();
                        return;
                    }

                    const isCurrentlyLiked = likeButton.classList.contains('text-red-500');

                    let url = '';
                    let successMessage = '';
                    let errorMessage = '';
                    let newIconName = '';
                    let newClassListAction = '';

                    if (isCurrentlyLiked) {
                        url = '/Home/Unlike';
                        successMessage = "Đã bỏ thích bài viết!";
                        errorMessage = "Không thể bỏ thích bài viết.";
                        newIconName = 'heart-outline';
                        newClassListAction = 'remove';
                    } else {
                        url = '/Home/LikePost';
                        successMessage = "Đã thích bài viết!";
                        errorMessage = "Không thể thích bài viết.";
                        newIconName = 'heart';
                        newClassListAction = 'add';
                    }

                    const formdata = new FormData();
                    formdata.append("postId", postId);

                    fetch(url, {
                        method: 'POST',
                        body: formdata,
                    })
                    .then(response => {
                        if (!response.ok) {
                            if (response.status === 401) {
                                Toastify({
                                    text: "Bạn cần đăng nhập để thực hiện hành động này.",
                                    duration: 3000,
                                    backgroundColor: "#f44336",
                                    gravity: "top",
                                    position: "center",
                                }).showToast();
                                return Promise.reject("Unauthorized");
                            }
                            return response.json().then(err => Promise.reject(err.message || 'Lỗi server không xác định'));
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.status === 1) {
                            Toastify({
                                text: successMessage,
                                duration: 3000,
                                backgroundColor: "#4CAF50",
                                gravity: "top",
                                position: "center",
                            }).showToast();

                            const likeCountElement = likeButton.nextElementSibling;
                            let currentLikes = parseInt(likeCountElement.textContent);

                            if (newClassListAction === 'add') {
                                likeButton.classList.add('text-red-500', 'bg-red-100');
                                currentLikes++;
                            } else {
                                likeButton.classList.remove('text-red-500', 'bg-red-100');
                                currentLikes--;
                            }
                            likeButton.querySelector('ion-icon').setAttribute('name', newIconName);
                            likeCountElement.textContent = currentLikes;

                        } else {
                            Toastify({
                                text: data.message || errorMessage,
                                duration: 3000,
                                backgroundColor: "#f44336",
                                gravity: "top",
                                position: "center",
                            }).showToast();
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        if (err !== "Unauthorized") {
                            Toastify({
                                text: err || errorMessage,
                                duration: 3000,
                                backgroundColor: "#f44336",
                                gravity: "top",
                                position: "center",
                            }).showToast();
                        }
                    });
                });
            }

                if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function () {
                const nextPage = parseInt(this.getAttribute('data-next-page'));
                const pageSize = parseInt(this.getAttribute('data-page-size'));

                console.log('nextPage:', nextPage, 'pageSize:', pageSize);

                if (isNaN(nextPage) || nextPage < 1) {
                    console.warn('Giá trị nextPage không hợp lệ:', nextPage);
                    return;
                }

                this.disabled = true;
                this.querySelector('span').textContent = 'Đang tải...';

                fetch(`/Home/GetMorePosts?pageNumber=${nextPage}&pageSize=${pageSize}`)
                    .then(res => res.text())
                    .then(html => {
                        if (html.trim() === "") {
                            loadMoreBtn.querySelector('span').textContent = "Đã hết bài viết";
                            loadMoreBtn.disabled = true;
                        } else {
                            postsContainer.insertAdjacentHTML('beforeend', html);
                            loadMoreBtn.setAttribute('data-next-page', nextPage + 1);
                            loadMoreBtn.querySelector('span').textContent = "Tải thêm";
                            loadMoreBtn.disabled = false;
                        }
                    })
                    .catch(err => {
                        console.error(err);
                        loadMoreBtn.querySelector('span').textContent = "Tải thêm";
                        loadMoreBtn.disabled = false;
                        Toastify({
                            text: "Có lỗi xảy ra khi tải thêm bài viết.",
                            duration: 3000,
                            backgroundColor: "#f44336",
                            gravity: "top",
                            position: "center",
                        }).showToast();
                    });
            });
        }


            document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
            const postId = document.getElementById("deleteConfirmationPostId").value;

            if (!postId) return;

            fetch(`/Home/DeletePost?postId=${postId}`, {
                method: "DELETE"
            })
            .then(res => res.json())
            .then(data => {
                if (data.status === 1) {
                    Toastify({
                        text: data.message || "Xóa bài viết thành công.",
                        duration: 3000,
                        backgroundColor: "#4CAF50",
                        gravity: "top",
                        position: "center",
                    }).showToast();

                    UIkit.modal('#postDeleteDialog').hide();
                    document.querySelector(`.post-container[data-post-id="${postId}"]`)?.remove();
                } else {
                    Toastify({
                        text: data.message || "Không thể xóa bài viết.",
                        duration: 3000,
                        backgroundColor: "#f44336",
                        gravity: "top",
                        position: "center",
                    }).showToast();
                }
            })
            .catch(error => {
                console.error("Lỗi:", error);
                Toastify({
                    text: "Có lỗi xảy ra khi xóa bài viết.",
                    duration: 3000,
                    backgroundColor: "#f44336",
                    gravity: "top",
                    position: "center",
                }).showToast();
            });
        });

        });

        if (window.history && window.history.replaceState) {
                window.history.replaceState(null, document.title, window.location.href);
            }

    </script>
