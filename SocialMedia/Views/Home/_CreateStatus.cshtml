﻿@using Models.ViewModel.Home
@model PostVM

<div class="hidden lg:p-20" id="create-status" uk-modal="">
    <div class="uk-modal-dialog tt relative overflow-hidden mx-auto bg-white shadow-xl rounded-lg md:w-[520px] w-full">
        <div class="text-center py-4 border-b mb-0">
            <h2 class="text-sm font-medium text-black">Create Status</h2>
            <button type="button" class="button-icon absolute top-0 right-0 m-2.5 uk-modal-close">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <form asp-controller="Home" asp-action="CreatePost" enctype="multipart/form-data" id="createPostForm">
            <div class="space-y-5 mt-3 p-2">
                <textarea name="Content" id="Content" class="w-full !text-black placeholder:!text-black !bg-white !border-transparent focus:!border-transparent focus:!ring-transparent !font-normal !text-xl" asp-for="Content" rows="2" placeholder="What do you have in mind?"></textarea>
            </div>
            <div class="flex items-center gap-2 text-sm py-2 px-4 font-medium flex-wrap">
                <input id="imageUpload" type="file" class="hidden" name="Image" multiple accept="image/png, image/jpeg" />

                <div id="imagePreviewContainer" class="flex flex-wrap gap-2 hidden"></div>

                <button type="button" id="imageUploadBtn" class="flex items-center gap-1.5 bg-sky-50 text-sky-600 rounded-full py-1 px-2 border-2 border-sky-100">
                    <ion-icon name="image" class="text-base"></ion-icon> Image
                </button>
            </div>

            <div class="p-5 flex justify-between items-center">
                <button type="submit" class="button bg-blue-500 text-white py-2 px-12 text-[14px]">Create</button>
            </div>
        </form>
    </div>
</div>

<script>
    window.addEventListener("DOMContentLoaded", () => {
        const imageUploadBtn = document.getElementById('imageUploadBtn');
        const imageUpload = document.getElementById('imageUpload');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const createPostForm = document.getElementById('createPostForm');
        let previewFiles = [];

        // Ngăn chặn hành vi mặc định khi kéo thả
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            createPostForm.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // Đổi màu border khi kéo file vào
        createPostForm.addEventListener('dragenter', () => {
            createPostForm.classList.add('border-blue-500');
            createPostForm.classList.remove('border-gray-300');
        }, false);

        createPostForm.addEventListener('dragleave', () => {
            createPostForm.classList.remove('border-blue-500');
            createPostForm.classList.add('border-gray-300');
        }, false);

        // Xử lý khi thả file vào form
        createPostForm.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            createPostForm.classList.remove('border-blue-500');
            createPostForm.classList.add('border-gray-300');

            // Cập nhật input files và kích hoạt sự kiện change
            imageUpload.files = e.dataTransfer.files;
            const changeEvent = new Event('change');
            imageUpload.dispatchEvent(changeEvent);
        }

        // Mở hộp thoại chọn file khi nhấn nút "Image"
        imageUploadBtn.addEventListener('click', () => {
            imageUpload.click();
        });

        // Xử lý khi người dùng chọn file
        imageUpload.addEventListener('change', (event) => {
            // Lấy danh sách file mới và gán trực tiếp cho mảng previewFiles
            previewFiles = Array.from(event.target.files);

            // Cập nhật giao diện xem trước ảnh
            updateImagePreview();
        });

        // Hàm cập nhật giao diện xem trước ảnh
        function updateImagePreview() {
            imagePreviewContainer.innerHTML = '';
            imagePreviewContainer.classList.toggle('hidden', previewFiles.length === 0);

            previewFiles.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const previewItem = document.createElement('div');
                    previewItem.classList.add('relative');

                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.classList.add('w-24', 'h-24', 'rounded');
                    previewItem.appendChild(img);

                    const removeButton = document.createElement('button');
                    removeButton.innerHTML = `
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>`;
                    removeButton.classList.add('absolute', 'top-0', 'right-0', '-mt-1', '-mr-1', 'bg-white', 'rounded-full', 'w-6', 'h-6', 'flex', 'items-center', 'justify-center', 'shadow');

                    removeButton.addEventListener('click', (e) => {
                        e.preventDefault();
                        // Xóa file khỏi mảng và cập nhật lại FileList
                        previewFiles.splice(index, 1);
                        updateInputFiles();
                        updateImagePreview();
                    });

                    previewItem.appendChild(removeButton);
                    imagePreviewContainer.appendChild(previewItem);
                };
                reader.readAsDataURL(file);
            });
        }

        // Hàm cập nhật FileList của input file
        function updateInputFiles() {
            const dt = new DataTransfer();
            previewFiles.forEach(f => dt.items.add(f));
            imageUpload.files = dt.files;

            // Đặt lại giá trị input nếu không có file nào
            if (previewFiles.length === 0) {
                imageUpload.value = '';
            }
        }

        // Ngăn form submit nếu không có nội dung hoặc ảnh
        createPostForm.addEventListener('submit', (event) => {
            const content = createPostForm.querySelector('#Content').value.trim();
            const files = imageUpload.files;

            if (content.length === 0 && files.length === 0) {
                event.preventDefault();
                Toastify({
                    text: "Vui lòng nhập nội dung hoặc chọn ảnh để đăng.",
                    duration: 3000,
                    gravity: "top",
                    position: "center",
                    backgroundColor: "#f44336"
                }).showToast();
            }
        });

        // Xử lý thông báo thành công/thất bại từ TempData
        const successMessage = "@TempData["Success"]";
        const errorMessage = "@TempData["Error"]";

        if (successMessage) {
            Toastify({
                text: "Đăng bài thành công",
                duration: 3000,
                gravity: "top",
                position: "center",
                backgroundColor: "#4CAF50"
            }).showToast();
        }

        if (errorMessage) {
            Toastify({
                text: "Đăng bài thất bại",
                duration: 3000,
                gravity: "top",
                position: "center",
                backgroundColor: "#f44336"
            }).showToast();
        }
    });
</script>