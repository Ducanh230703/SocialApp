@using Models.ViewModel.GroupMember
@using Models.ViewModel.Home
@model Models.ResponseModels.GroupDetailResponseModel

@{
    ViewData["Title"] = @Model.GroupName;
    int loggedInUserId = ViewBag.LoggedInUserId as int? ?? 0;
}

<div class="container mx-auto p-4" style="width: 580px">
    <div class="bg-white rounded-xl shadow-sm text-sm font-medium border1 mb-6">
        <div class="sm:p-4 p-2.5 text-center">
            <h1 class="text-2xl font-bold">@Model.GroupName</h1>
            <p class="text-gray-500">
                @Model.MemberCount thành viên
                @if (Model.IsPrivate)
                {
                    <i class="fas fa-lock text-gray-400 ml-1" title="Nhóm riêng tư"></i>
                }
            </p>
            <p class="text-xs text-gray-500 mt-1">
                Được tạo bởi:
                <a href="/User/Details?userId=@Model.CreatedByUserId" class="text-blue-500 hover:underline">
                    @Model.CreatedByUserName
                </a>
            </p>
            <button onclick="openMembersModal('@Model.ID', '@Model.CurrentUserRole')"
                    class="bg-green-500 text-white py-2 px-6 rounded-full hover:bg-green-600 transition-colors ml-2">
                Xem thành viên
            </button>
            <div class="mt-4">
                @if (Model.IsMember)
                {
                    <button onclick="handleGroupAction('@Model.ID', 'DELETE', 'Rời nhóm thành công')"
                            class="bg-red-600 text-white py-2 px-6 rounded-full hover:bg-red-700 transition-colors">
                        Rời nhóm    
                    </button>
                }
                else
                {
                    <button onclick="handleGroupAction('@Model.ID', 'POST', 'Tham gia nhóm thành công')"
                            class="bg-blue-500 text-white py-2 px-6 rounded-full hover:bg-blue-600 transition-colors">
                        Tham gia nhóm
                    </button>
                }

                @if (loggedInUserId == Model.CreatedByUserId)
                {
                    <button onclick="deleteGroup('@Model.ID')"
                            class="bg-gray-700 text-white py-2 px-6 rounded-full hover:bg-gray-800 transition-colors ml-2">
                        Xóa nhóm
                    </button>
                }
            </div>

        </div>
    </div>

    <div class="bg-white rounded-xl shadow-sm md:p-4 p-2 space-y-4 text-sm font-medium border1">
        <div class="flex items-center md:gap-3 gap-1">
            <div class="flex-1 bg-slate-100 hover:bg-opacity-80 transition-all rounded-lg cursor-pointer" uk-toggle="target: #create-status">
                <div class="py-2.5 text-center">What do you have in mind?</div>
            </div>
            <div class="cursor-pointer hover:bg-opacity-80 p-1 px-1.5 rounded-xl transition-all bg-pink-100/60 hover:bg-pink-100" uk-toggle="target: #create-status">
                <svg xmlns="http://www.w3.org/2000/svg" class="w-8 h-8 stroke-pink-600 fill-pink-200/70" viewBox="0 0 24 24" stroke-width="1.5" stroke="#2c3e50" fill="none" stroke-linecap="round" stroke-linejoin="round">
                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                    <path d="M15 8h.01" />
                    <path d="M12 3c7.2 0 9 1.8 9 9s-1.8 9 -9 9s-9 -1.8 -9 -9s1.8 -9 9 -9z" />
                    <path d="M3.5 15.5l4.5 -4.5c.928 -.893 2.072 -.893 3 0l5 5" />
                    <path d="M14 14l1 -1c.928 -.893 2.072 -.893 3 0l2.5 2.5" />
                </svg>
            </div>
        </div>
    </div>
    @if(Model.IsPrivate && Model.IsMember || !Model.IsPrivate)
    {
        <div id="posts-container" style="width:580px" class="space-y-4">
            @if (Model.RecentPosts != null && Model.RecentPosts.Any())
            {
                foreach (var post in Model.RecentPosts)
                {
                    @await Html.PartialAsync("_Post", post, new ViewDataDictionary(ViewData) { { "ShowAllComment", true } })
                }
            }
            else
            {
                <p class="text-center text-gray-500">Nhóm này chưa có bài viết nào.</p>
            }
        </div>
    }
    <partial name="/Views/Home/_CreateStatus.cshtml" model="new PostVM { GroupID = Model.ID };" />
    <partial name="/Views/Home/_PostDeleteConfirmation.cshtml" />
    <partial name="/Views/Home/_EditStatus.cshtml" model="new PostEditVM()" />
    <partial name="_GroupMembersModal" model="new List<GroupMemberList>()" />

</div>
@section Scripts {
    <script>
        function showToast(message, isSuccess) {
            if (typeof Toastify === 'function') {
                Toastify({
                    text: message,
                    duration: 3000,
                    gravity: "top",
                    position: "center",
                    backgroundColor: isSuccess ? "#4CAF50" : "#f44336"
                }).showToast();
            } else {
                alert(message);
            }
        }

        window.handleGroupAction = function(groupId, method, successMessage) {

            let actionText = (method === 'POST') ? 'tham gia' : 'rời';
            if (!confirm(`Bạn có chắc chắn muốn ${actionText} nhóm này không?`)) {
                return;
            }

            let url = (method === 'POST') ? '/GroupMember/JoinGroup' : '/GroupMember/LeaveGroup';

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(parseInt(groupId))
            })
            .then(data => data.json()) 
            .then(data => {
                if (data.status === 1) { // 1 là thành công theo quy ước ApiReponseModel
                    showToast(data.mess, true);
                    // Tải lại trang để cập nhật trạng thái nút (IsMember)
                    setTimeout(() => window.location.reload(), 500);
                } else {
                    showToast(data.Mess || `Thao tác ${actionText} nhóm không thành công.`, false);
                }
            })
            .catch(error => {
                console.error(`Lỗi khi ${actionText} nhóm:`, error);
                showToast('Đã xảy ra lỗi hệ thống. Vui lòng thử lại.', false);
            });
        };

                async function openMembersModal(groupId, currentUserRole) {
            try {
                const res = await fetch(`/GroupMember/ShowMembersModal?groupId=${groupId}&currentUserRole=${currentUserRole}`);
                const html = await res.text();
                document.querySelectorAll('#groupMembersModal').forEach(e => e.remove());
                document.body.insertAdjacentHTML('beforeend', html);
                document.getElementById('groupMembersModal').classList.remove('hidden');
            } catch (error) {
                console.error("Lỗi tải danh sách thành viên:", error);
            }
        }


        function closeMembersModal() {
            const modal = document.getElementById('groupMembersModal');
            if (modal) modal.classList.add('hidden');
        }

            const currentGroupId = @Model.ID ?? 0; // Giả định tất cả user cùng group

        function kickMember(userId) {
            if (!currentGroupId || !userId) return;

            if (confirm("Bạn có chắc muốn kick thành viên này không?")) {
                fetch('/GroupMember/DeleteMember', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        groupId: currentGroupId,
                        userId: userId
                    })
                })
                .then(res => res.json())
                .then(data => {
                    alert(data.mess || (data.mtatus === 1 ? "Đã kick thành viên." : "Không thể kick."));
                    if (data.Status === 1) location.reload();
                });
            }
        }

        function toggleAdmin(userId, currentRole) {
            if (!currentGroupId || !userId) return;

            const isAdmin = currentRole.toLowerCase() === 'admin';
            const url = isAdmin ? '/GroupMember/RemoveAdmin' : '/GroupMember/AddAdmin';
            const confirmMsg = isAdmin ? 'Gỡ quyền admin?' : 'Thêm quyền admin?';

            if (confirm(confirmMsg)) {
                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        groupId: currentGroupId,
                        userId: userId
                    })
                })
                .then(res => res.json())
                .then(data => {
                    alert(data.mess || (data.status === 1 ? "Thành công." : "Không thể thực hiện."));
                    if (data.Status === 1) location.reload();
                });
            }
        }
    </script>
}