@model Models.ReponseModel.PostFull
@using System.Security.Claims

@{
    int loggedInUserId = ViewBag.LoggedInUserId as int? ?? 0;
    TimeSpan timeSpanSincePosted = DateTime.UtcNow.Subtract(Model.DateCreated);
    string displayTime = timeSpanSincePosted switch
    {
        var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
        var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
        var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
        _ => "Just now"
    };

    bool isLiked = Model.LikeUserIds.Contains(loggedInUserId);
    bool isPrivate = Model.IsPrivate && Model.UserId == loggedInUserId;
    int showAllCommentsPostId = ViewData["ShowAllCommentsPostId"] as int? ?? -1;
    bool showAllComments = showAllCommentsPostId == Model.Id;
    bool isOwner = Model.UserId == loggedInUserId;

    string[] imageUrls = string.IsNullOrEmpty(Model.ImageUrl) ? new string[0] : Model.ImageUrl.Split(',');
}

<div id="post-@Model.Id" class="bg-white rounded-xl shadow-sm text-sm font-medium border1">
    <div class="flex gap-3 sm:p-4 p-2.5 text-sm font-medium">
        <a href="/User/Details?userId=@Model.UserId">
            <img src="@(!string.IsNullOrEmpty(Model.UserProfilePictureUrl) ? Model.UserProfilePictureUrl : Url.Content("~/images/avatar/user.png"))" class="w-9 h-9 rounded-full" />
        </a>
        <div class="flex-1">
            <a href="/User/Details?userId=@Model.UserId">

                <h4  class="text-black">@Model.UserFullName</h4>
            </a>
           
            <div class="text-xs text-gray-500/80" title="@Model.DateCreated.ToString("MM/dd/yyyy HH:mm")">@displayTime</div>
        </div>
        @if (isOwner)
        {
            <div class="flex gap-2">
                <a href="javascript:void(0)" onclick="openEditModal(@Model.Id)">Edit</a>
                <a href="javascript:void(0);" onclick="openPostDeleteConfirmation(@Model.Id)" class="text-red-500 hover:text-red-700">
                    Delete
                </a>            </div>
        }
    </div>

    <div class="sm:px-4 p-2.5 pt-0 w-full">
        <p class="font-normal">@Model.Content</p>
    </div>

    @if (imageUrls.Length > 0)
    {
        <div class="relative w-full">
            @if (imageUrls.Length == 1)
            {
                <img src="@imageUrls[0]" class="sm:rounded-lg w-full h-auto object-cover" style="max-height: 500px; object-fit: contain;" />
            }
            else
            {
                <div class="flex flex-wrap gap-2">
                    @foreach (string imageUrl in imageUrls)
                    {
                        <img src="@imageUrl"
                             class="sm:rounded-lg w-full sm:w-1/2 lg:w-1/3 h-auto object-cover"
                             style="max-height: 300px;" />
                    }
                </div>
            }
        </div>
    }


    <div class="sm:p-4 p-2.5 flex items-center gap-4 text-xs font-semibold">
        <div class="flex items-center gap-2.5">
            <button class="button-icon like-button @(isLiked ? "text-red-500 bg-red-100" : "")" data-post-id="@Model.Id" data-user-id="@loggedInUserId">
                <ion-icon class="text-lg" name="@(isLiked ? "heart" : "heart-outline")"></ion-icon>
            </button>
            <a href="#">@Model.LikeUserIds.Count</a>
        </div>

        <div class="flex items-center gap-3">
            <a class="button-icon">
                <ion-icon class="text-lg" name="chatbubble-ellipses-outline"></ion-icon>
            </a>
            <a href="#">@Model.Comments.Count</a>
        </div>

        <div class="ml-auto"></div>
    </div>

    <div class="p-2.5 border-t border-gray-100 font-normal space-y-3 relative">
        @foreach (var comment in showAllComments
        ? Model.Comments.OrderByDescending(n => n.DateCreated)
        : Model.Comments.OrderByDescending(n => n.DateCreated).Take(2))
        {
            TimeSpan commentTimeSpanSincePosted = DateTime.UtcNow.Subtract(comment.DateCreated.ToUniversalTime());

            string commentDisplayTime = commentTimeSpanSincePosted.TotalSeconds < 0
            ? "Just now"
            : commentTimeSpanSincePosted switch
            {
                var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
                var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
                var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
                _ => "Just now"
            };


            <div class="flex items-start gap-3 relative">
                <img src="@(!string.IsNullOrEmpty(comment.UserProfilePictureUrl) ? comment.UserProfilePictureUrl : Url.Content("~/images/avatar/user.png"))" class="w-6 h-6 mt-1 rounded-full" />
                <div class="flex-1">
                    <div class="flex justify-between">
                        <span class="text-black font-medium inline-block flex-grow">@comment.UserFullName</span>
                        <small>@commentDisplayTime</small>
                    </div>
                    <p class="mt-0.5">@comment.Content</p>
                    @if(loggedInUserId == Model.UserId || loggedInUserId == comment.UserId)
                    {
                        <form class="remove-comment-form" data-comment-id="@comment.ID" action="/Home/RemovePostComment">
                            <button type="submit" class="text-red-500 text-xs ml-2" title="Remove post comment">
                                <ion-icon name="trash-outline"></ion-icon>
                            </button>
                        </form>

                    } 
                    
                </div>
            </div>
        }

        @if (Model.Comments.Count >= 1 && !showAllComments)
        {
            <div class="p-1.5">
                <a asp-controller="Home" asp-action="Details" asp-route-postId="@Model.Id">
                    Show all comments
                </a>

            </div>
        }
        <form class="add-comment-form" data-post-id="@Model.Id">
            <div class="sm:px-4 sm:py-3 p-2.5 border-t border-gray-100 flex items-center gap-1">
                <a asp-controller="User" asp-action="Details" asp-route-userId="@Model.UserId">
                    <img src="@(string.IsNullOrEmpty(Model.UserProfilePictureUrl) ? Url.Content("~/images/avatar/user.png") : Model.UserProfilePictureUrl)" class="w-6 h-6 rounded-full" />
                </a>    
                <input type="hidden" name="postId" value="@Model.Id" />
                <div class="flex-1 relative overflow-hidden h-10">
                    <textarea name="content" placeholder="Add Comment...."
                              rows="1"
                              class="w-full resize-none !bg-transparent px-4 py-2 focus:!border-transparent focus:!ring-transparent"></textarea>
                </div>

                <button type="submit" class="text-sm rounded-full py-1.5 px-3.5 bg-secondery">Comment</button>
            </div>
        </form>
    </div>
</div>


