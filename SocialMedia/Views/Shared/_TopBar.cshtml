
@using Models
@using Models.ReponseModel
@using SocialMedia.Helper
@{
    var token = Context.Request.Cookies["AuthToken"];
    ApiReponseModel<UserReponseModel> loggedInUser = null;
    string fullName = null;
    string profilePictureUrl = null;

    if (!string.IsNullOrEmpty(token))
    {
        try
        {
            loggedInUser = await ApiHelper.GetAsync<ApiReponseModel<UserReponseModel>>("/api/User/checklog", token);
            if (loggedInUser != null && loggedInUser.Data != null)
            {
                fullName = loggedInUser.Data.FullName;
                profilePictureUrl = loggedInUser.Data.ProfilePictureUrl;
            }
            else
            {
                fullName = null;
                profilePictureUrl = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi lấy thông tin người dùng: {ex.Message}");
            fullName = null;
            profilePictureUrl = null;
        }
    }
    else
    {
        fullName = null;
        profilePictureUrl = null;
    }
}

<header class="z-[100] h-[--m-top] fixed top-0 w-full flex items-center bg-white/80 sky-50 backdrop-blur-xl border-b border-slate-200 xl:pl-[--w-side] lg:pl-[--w-side-sm] md:pl-[--w-side-sm]">

    <div class="2xl:w-[--w-side] lg:w-[--w-side-sm]">
        <div class="flex items-center gap-1">
            <button uk-toggle="target: #site__sidebar ; cls :!-translate-x-0"
                    class="flex items-center justify-center w-8 h-8 text-xl rounded-full hover:bg-gray-100 xl:hidden group">
                <ion-icon name="menu-outline" class="text-2xl group-aria-expanded:hidden"></ion-icon>
                <ion-icon name="close-outline" class="hidden text-2xl group-aria-expanded:block"></ion-icon>
            </button>

            <div id="logo" class="flex items-center">
                <a asp-controller="Home" class="flex items-center">
                    <img src="~/images/logo.png" class="w-10 ml-2 md:block hidden" />
                    <span class="ml-2">Circle App</span>
                </a>
            </div>

        </div>
    </div>
    <div class="flex-1 relative">
        <div class="max-w-[1220px] mx-auto flex items-center">
            <form id="search--box"
                  class="xl:w-[680px] sm:w-96 sm:relative rounded-xl overflow-hidden z-20 bg-secondery max-md:hidden w-screen left-0 max-sm:fixed max-sm:top-2">

                <ion-icon name="search" class="absolute left-4 top-1/2 -translate-y-1/2"></ion-icon>
                <input type="text" name="query" placeholder="Search Posts, Friends..." class="w-full !pl-10 !font-normal !bg-transparent h-12 !text-sm" />
            </form>
        </div>

        <div class="max-w-[1220px] mx-auto flex items-center">
            <div class="flex items-center sm:gap-4 gap-2 absolute right-5 top-1/2 -translate-y-1/2 text-black">

                <button type="button" class="sm:p-2 p-1 rounded-full relative sm:bg-secondery" id="messagesBtn">
                    <ion-icon name="chatbox-ellipses-outline" class="text-2xl max-sm:hidden"></ion-icon>
                    <div class="absolute top-0 right-0 -m-1 bg-red-600 text-white text-xs px-1 rounded-full" id="messagesCount">0</div>
                </button>
                <div class="hidden bg-white pr-1.5 rounded-lg drop-shadow-xl md:w-[365px] w-screen border2" uk-drop="offset:6;pos: bottom-right; mode: click; animate-out: true;target: #messagesBtn">
                    <div class="flex items-center justify-between gap-2 p-4 pb-2">
                        <h3 class="font-bold text-xl">Recent Messages</h3>
                        <a href="" class="text-blue-500 text-sm">See All</a>
                    </div>
                    <div class="text-sm h-[400px] w-full overflow-y-auto pr-2" id="message-dropdown">
                        <div class="pl-2 p-1 text-sm font-normal">
                            Loading messages...
                        </div>
                    </div>
                </div>


                <button type="button" class="sm:p-2 p-1 rounded-full relative sm:bg-secondery" id="notificationsBtn">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 max-sm:hidden">
                        <path d="M5.85 3.5a.75.75 0 00-1.117-1 9.719 9.719 0 00-2.348 4.876.75.75 0 001.479.248A8.219 8.219 0 015.85 3.5zM19.267 2.5a.75.75 0 10-1.118 1 8.22 8.22 0 011.987 4.124.75.75 0 001.48-.248A9.72 9.72 0 0019.266 2.5z" />
                        <path fill-rule="evenodd" d="M12 2.25A6.75 6.75 0 005.25 9v.75a8.217 8.217 0 01-2.119 5.52.75.75 0 00.298 1.206c1.544.57 3.16.99 4.831 1.243a3.75 3.75 0 107.48 0 24.583 24.583 0 004.83-1.244.75.75 0 00.298-1.205 8.217 8.217 0 01-2.118-5.52V9A6.75 6.75 0 0012 2.25zM9.75 18c0-.034 0-.067.002-.1a25.05 25.05 0 004.496 0l.002.1a2.25 2.25 0 11-4.5 0z" clip-rule="evenodd" />
                    </svg>
                    <div class="absolute top-0 right-0 -m-1 bg-red-600 text-white text-xs px-1 rounded-full" id="notificationsCount">0</div>
                </button>

                <div class="hidden bg-white pr-1.5 rounded-lg drop-shadow-xl md:w-[365px] w-screen border2" uk-drop="offset:6;pos: bottom-right; mode: click; animate-out: true;">

                    <div class="flex items-center justify-between gap-2 p-4 pb-2">
                        <h3 class="font-bold text-xl">Notifications</h3>
                    </div>

                    <div class="text-sm h-[400px] w-full overflow-y-auto pr-2">
                        <div class="pl-2 p-1 text-sm font-normal" id="notification-dropdown">
                            No notifications...
                        </div>
                    </div>

                </div>

                <div class="rounded-full relative bg-secondery cursor-pointer shrink-0">
                    <img src="@profilePictureUrl" class="sm:w-9 sm:h-9 w-7 h-7 rounded-full shadow shrink-0" />
                </div>
                <div class="hidden bg-white rounded-lg drop-shadow-xl w-64 border2" uk-drop="offset:6;pos: bottom-right;animate-out: true;">

                    <a asp-controller="User" asp-action="Details" asp-route-userId="@(loggedInUser?.Data?.ID ?? 0)">
                        <div class="p-4 py-5 flex items-center gap-4">
                            <img src="@(string.IsNullOrEmpty(profilePictureUrl) ? Url.Content("~/images/avatar/user.png") : profilePictureUrl)"
                                 class="w-10 h-10 rounded-full shadow"
                                 alt="Profile Picture" />
                            <div class="flex-1">
                                <h4 class="text-sm font-medium text-black">@fullName</h4>
                            </div>
                        </div>
                    </a>
                    <hr />
                    <nav>
                        <a asp-controller="User" asp-action="GetInfo" asp-route-userId="@(loggedInUser?.Data?.ID ?? 0)"
                           class="flex items-center gap-2.5 hover:bg-secondery p-2 px-2.5 rounded-md">
                            <ion-icon name="settings-outline" class="text-lg"></ion-icon> My Account
                        </a>
                        <hr />
                        <a asp-controller="Authentication" asp-action="Logout">
                            <div class="flex items-center gap-2.5 hover:bg-secondery p-2 px-2.5 rounded-md">
                                <ion-icon name="exit-outline" class="text-lg"></ion-icon> Log Out
                            </div>
                        </a>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</header>

<script src="https://cdnjs.cloudflare.com/ajax/libs/aspnet-signalr/1.0.27/signalr.min.js" integrity="sha512-a+73ErrZPjhqOu0qbW1QLsenEF4pvDjmnd+Ws6hkDyJlrwAigOQAxQhIT+fPNFWScUvtJQvn+G535TT2C6/G4g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    let currentMessagePage = 1;
    const messagePageSize = 10; 

    document.addEventListener("DOMContentLoaded", () => {
        fetch("/Notification/GetCount", {
            method: 'GET',
            headers: {
                'Content-Type':'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            const notificationCount = (typeof data === 'object' && data !== null && data.status === 1 && data.data !== undefined)
                                    ? data.data
                                    : data;

            const notificationsCountElement = document.getElementById("notificationsCount");
            if (notificationsCountElement) {
                notificationsCountElement.innerHTML = notificationCount > 0 ? notificationCount : '';
                notificationsCountElement.style.display = notificationCount > 0 ? '' : 'none'; 
            }
        })
        .catch(error => {
            console.error("Lỗi khi lấy số lượng thông báo: ", error);
            const notificationsCountElement = document.getElementById("notificationsCount");
            if (notificationsCountElement) notificationsCountElement.innerHTML = '';
        });

        document.getElementById('notificationsBtn').addEventListener('click', () => {
            const notificationDropdown = document.getElementById('notification-dropdown');
            if (notificationDropdown) {
                notificationDropdown.innerHTML = '<div class="pl-2 p-1 text-sm font-normal">Đang tải thông báo...</div>';
            }
            fetch('/Notification/GetNoticeAll')
                .then(resp => {
                    if (!resp.ok) {
                        return resp.text().then(text => { throw new Error(`Lỗi HTTP! Trạng thái: ${resp.status}, Phản hồi: ${text}`); });
                    }
                    return resp.text();
                })
                .then(html => {
                    if (notificationDropdown) {
                        notificationDropdown.innerHTML = html;
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi tải thông báo: ", error);
                    if (notificationDropdown) {
                        notificationDropdown.innerHTML = '<div class="pl-2 p-1 text-sm font-normal text-red-500">Không thể tải thông báo. Vui lòng thử lại.</div>';
                    }
                });
        });

        const searchForm = document.getElementById('search--box');
        if (searchForm) {
            searchForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const searchInput = this.querySelector('input[name="query"]');
                const query = searchInput.value.trim();

                const pageNumber = 1; 
                const pageSize = 5; 

                if (!query) {
                    if (typeof Toastify !== 'undefined') {
                        Toastify({
                            text: "Vui lòng nhập từ khóa tìm kiếm.",
                            duration: 3000,
                            backgroundColor: "#f44336",
                            gravity: "top",
                            position: "center",
                        }).showToast();
                    } else {
                        alert("Vui lòng nhập từ khóa tìm kiếm.");
                    }
                    return;
                }

                window.location.href = `/FriendRequest/SearchResult?stringSearch=${encodeURIComponent(query)}&pageNumber=${pageNumber}&pageSize=${pageSize}`;
            });
        }

        // fetch("/Message/GetUnreadMessageCount", {
        //     method: 'GET',
        //     headers: { 'Content-Type': 'application/json' }
        // })
        // .then(response => response.json())
        // .then(data => {
        //     const unreadCount = (typeof data === 'object' && data !== null && data.status === 1 && data.data !== undefined)
        //                         ? data.data
        //                         : data;
        //     const messagesCountElement = document.getElementById("messagesCount");
        //     if (messagesCountElement) {
        //         messagesCountElement.innerHTML = unreadCount > 0 ? unreadCount : '';
        //         messagesCountElement.style.display = unreadCount > 0 ? '' : 'none';
        //     }
        // })
        // .catch(error => {
        //     console.error("Lỗi khi lấy số lượng tin nhắn chưa đọc: ", error);
        //     const messagesCountElement = document.getElementById("messagesCount");
        //     if (messagesCountElement) messagesCountElement.innerHTML = '';
        // });

        document.getElementById('messagesBtn').addEventListener('click', () => {
            currentMessagePage = 1;
            loadMessagesContent(currentMessagePage, messagePageSize);
        });

        function loadMessagesContent(page, size) {
            const messageDropdown = document.getElementById('message-dropdown');
            if (messageDropdown) {
                if (page === 1) {
                    messageDropdown.innerHTML = '<div class="pl-2 p-1 text-sm font-normal">Đang tải tin nhắn...</div>';
                }

                fetch(`/Message/GetMessengerList?pageNumber=${page}&pageSize=${size}`) // Sử dụng GetRecentConversations như đã thống nhất trong Controller
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`Lỗi HTTP! Trạng thái: ${response.status}, Phản hồi: ${text}`);
                            });
                        }
                        return response.text(); 
                    })
                    .then(html => {
                        if (page === 1) {
                            messageDropdown.innerHTML = html;
                        } else {

                            const loadMoreButtonContainer = messageDropdown.querySelector('.load-more-messages-container');
                            if (loadMoreButtonContainer) {
                                loadMoreButtonContainer.remove();
                            }
                            messageDropdown.insertAdjacentHTML('beforeend', html);
                        }
                        // Cập nhật biến trang hiện tại sau khi tải thành công
                        currentMessagePage = page;
                    })
                    .catch(error => {
                        console.error("Lỗi khi tải tin nhắn gần đây: ", error);
                        if (page === 1) { 
                            messageDropdown.innerHTML = '<div class="pl-2 p-1 text-sm font-normal text-red-500">Không thể tải tin nhắn. Vui lòng thử lại.</div>';
                        } else {
                            console.error("Không thể tải thêm tin nhắn.", error);
                            if (typeof Toastify !== 'undefined') {
                                Toastify({
                                    text: "Không thể tải thêm tin nhắn.",
                                    duration: 3000,
                                    backgroundColor: "#f44336",
                                    gravity: "bottom",
                                    position: "center",
                                }).showToast();
                            }
                        }
                    });
            }
        }
       
    });


    window.loadMoreMessages = function(nextPageNumber, pageSize) {
        loadMessagesContent(nextPageNumber, pageSize);
    };

    window.setNotificationAsRead = function(notificationId) {
        console.log(`Đang cố gắng đánh dấu thông báo ${notificationId} là đã đọc.`);
        const formData = new FormData();
        formData.append("noticeId", notificationId);

        fetch(`/Notification/SetRead`, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(`Lỗi HTTP! Trạng thái: ${response.status}, Thông báo: ${err.message || JSON.stringify(err)}`); });
            }
            return response.json();
        })
        .then(apiResponse => {
            if (apiResponse && apiResponse.status === 1) {
                console.log(`Thông báo ${notificationId} đã được đánh dấu là đã đọc thành công.`);

                // Loại bỏ chấm đỏ hoặc đổi màu nền
                const dotElement = document.querySelector(`div[onclick="setNotificationAsRead(${notificationId})"] .absolute.top-2.right-2.w-2.h-2.bg-red-600.rounded-full`); // Đảm bảo chọn đúng chấm đỏ
                if (dotElement) {
                    dotElement.remove();
                }

                const notificationItem = document.getElementById(`notification-item-${notificationId}`);
                if (notificationItem && notificationItem.classList.contains('bg-teal-500/5')) {
                    notificationItem.classList.remove('bg-teal-500/5');
                }
                // Nếu chấm đỏ là một phần tử riêng và không có ID trực tiếp,
                // bạn có thể cần tìm phần tử cha gần nhất và loại bỏ chấm đỏ từ đó.
                else if (dotElement) { // Kiểm tra lại nếu dotElement là phần tử cha của chấm đỏ
                    const parentDiv = dotElement.closest('.relative.flex.items-center.gap-3');
                    if (parentDiv && parentDiv.classList.contains('bg-teal-500/5')) {
                        parentDiv.classList.remove('bg-teal-500/5');
                    }
                }

                // Cập nhật lại số lượng thông báo chưa đọc
                fetch("/Notification/GetCount", {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' } // Thêm header này cho rõ ràng
                })
                .then(response => response.json())
                .then(data => {
                    const updatedCount = (typeof data === 'object' && data !== null && data.status === 1 && data.data !== undefined)
                                        ? data.data : data;
                    const notificationsCountElement = document.getElementById("notificationsCount");
                    if (notificationsCountElement) {
                        notificationsCountElement.innerHTML = updatedCount > 0 ? updatedCount : '';
                        notificationsCountElement.style.display = updatedCount > 0 ? '' : 'none';
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi cập nhật số lượng thông báo sau khi đánh dấu đã đọc: ", error);
                });

            } else {
                console.error("Không thể đánh dấu thông báo là đã đọc:", apiResponse ? apiResponse.message || apiResponse.mess : "Lỗi API không xác định.");
            }
        })
        .catch(error => {
            console.error("Lỗi mạng hoặc lỗi không xác định khi đánh dấu thông báo là đã đọc: ", error);
        });
    };
</script>